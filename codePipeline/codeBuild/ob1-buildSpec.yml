version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - echo Building the $IMAGE_REPO_NAME Docker image... 
      - cd ./application-services-1
      - IMAGE_TAG=$(echo $CODEBUILD_BUILD_ID | sed 's/:/-/g') # Replace ":" with "-" to ensure compatibility
      - echo Using image tag $IMAGE_TAG       
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG      
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - mkdir -p codePipeline/codeDeploy  # Ensure the directory exists
      # - echo $IMAGE_TAG > /tmp/image_tag.txt  # Write to the /tmp directory, which is accessible across stages
      - echo $IMAGE_TAG > codePipeline/codeDeploy/tmp/image_tag.txt  # Save the tag to the correct location
      # - echo $IMAGE_TAG > image_tag.txt  # Save the tag to a file to pass to the deploy stage
artifacts:
  base-directory: codePipeline/codeDeploy
  files:
    # - /tmp/image_tag.txt  # Reference the image_tag.txt file in /tmp directory
    - appspec.yml
    - scripts/*
    - /tmp/image_tag.txt  # Include the image tag in the artifacts
  discard-paths: no